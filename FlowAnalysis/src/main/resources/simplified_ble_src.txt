% Sources Bluetooth

% added BLE sources
<android.bluetooth.BluetoothGattService: java.util.List getIncludedServices()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: java.util.List getCharacteristics()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: android.bluetooth.BluetoothGattCharacteristic getCharacteristic(java.util.UUID)> -> _SOURCE_

% those two call callback methods
<android.bluetooth.BluetoothGatt: boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor)> -> _SOURCE_

%callback methods -> in theory not needed since we could handle it with callbacks
<android.bluetooth.BluetoothGattCallback: void onCharacteristicChanged(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,byte[])> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onCharacteristicChanged(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic)> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onCharacteristicRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,byte[],int)> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onCharacteristicRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int)> -> _SOURCE_

<android.bluetooth.BluetoothGattCallback: void onDescriptorRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,int,byte[])> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onDescriptorRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,int)> -> _SOURCE_

%okok scale uses the callback -> deprecated since api 21
<android.bluetooth.BluetoothAdapter.LeScanCallback: void onLeScan(android.bluetooth.BluetoothDevice,int,byte[])> -> _SOURCE_
% BL
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()> -> _SOURCE_






% Shared Preferences _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)> -> _SINK_

% Content resolver
%<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
%<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_
%<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
%<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
%<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_


% database statement
%<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
%<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
%<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> -> _SINK_
%<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
%<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)> -> _SINK_

%intent sinks
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])> -> _SINK_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])> -> _SINK_


%bundle sinks
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)> -> _SINK_
<android.os.Bundle: void putBoolean(java.lang.String,boolean)> -> _SINK_
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])> -> _SINK_
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> -> _SINK_
<android.os.Bundle: void putByte(java.lang.String,byte)> -> _SINK_
<android.os.Bundle: void putByteArray(java.lang.String,byte[])> -> _SINK_
<android.os.Bundle: void putChar(java.lang.String,char)> -> _SINK_
<android.os.Bundle: void putCharArray(java.lang.String,char[])> -> _SINK_
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])> -> _SINK_
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putDouble(java.lang.String,double)> -> _SINK_
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])> -> _SINK_
<android.os.Bundle: void putFloat(java.lang.String,float)> -> _SINK_
<android.os.Bundle: void putFloatArray(java.lang.String,float[])> -> _SINK_
<android.os.Bundle: void putInt(java.lang.String,int)> -> _SINK_
<android.os.Bundle: void putIntArray(java.lang.String,int[])> -> _SINK_
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putLong(java.lang.String,long)> -> _SINK_
<android.os.Bundle: void putLongArray(java.lang.String,long[])> -> _SINK_
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> -> _SINK_
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> -> _SINK_
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> -> _SINK_
<android.os.Bundle: void putShort(java.lang.String,short)> -> _SINK_
<android.os.Bundle: void putShortArray(java.lang.String,short[])> -> _SINK_
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> -> _SINK_
<android.os.Bundle: void putString(java.lang.String,java.lang.String)> -> _SINK_
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> -> _SINK_
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putAll(android.os.Bundle)> -> _SINK_




% Other sinks
<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)> -> _SINK_
<org.springframework.web.servlet.tags.UrlTag: java.lang.String createUrl()> -> _SINK_
<org.apache.xmlrpc.webserver.XmlRpcServletServer: void execute(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.apache.xmlrpc.webserver.ServletOutputStreamImpl: void write(byte[],int,int)> -> _SINK_
<org.apache.xmlrpc.webserver.ConnectionServer: void writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig,java.io.OutputStream,java.lang.Object)> -> _SINK_
<org.apache.xmlrpc.webserver.Connection: void writeResponseHeader(org.apache.xmlrpc.webserver.RequestData,int)> -> _SINK_
<org.apache.xmlrpc.server.XmlRpcServerWorker: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)> -> _SINK_
<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void handleMessage(org.springframework.web.socket.TextMessage,org.springframework.web.socket.WebSocketSession)> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> -> _SINK_
<org.apache.xmlrpc.client.XmlRpcClient: java.lang.Object execute(java.lang.String,java.lang.Object[])> -> _SINK_
<javax.servlet.http.HttpServletResponseWrapper: void sendRedirect(java.lang.String)> -> _SINK_

<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_



% java.net.URL
<java.net.URLConnection: void connect()> -> _SINK_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SINK_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SINK_


<java.net.URL: java.io.InputStream openStream()> -> _SINK_
<java.net.URL: java.lang.Object getContent()> -> _SINK_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _SINK_

<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_


%<java.io.OutputStream: void write(byte[])> -> _SINK_
%<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
%<java.io.OutputStream: void write(int)> -> _SINK_


%<java.io.Writer: void write(char[])> -> _SINK_
%<java.io.Writer: void write(char[],int,int)> -> _SINK_
%<java.io.Writer: void write(int)> -> _SINK_
%<java.io.Writer: void write(java.lang.String)> -> _SINK_
%<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_
%<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_

%<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_

<java.net.Socket: void connect(java.net.SocketAddress)> -> _SINK_

% Sms
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS -> _SINK_
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS -> _SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> android.permission.SEND_SMS -> _SINK_



% okhttp3
<okhttp3.Call: okhttp3.Response execute()> -> _SINK_
<okhttp3.Call: okhttp3.Response enqueue(okhttp3.Callback)> -> _SINK_



% volley - Not sure about the response type
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SINK_


% loopj
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle sendRequest(cz.msebera.android.httpclient.impl.client.DefaultHttpClient,cz.msebera.android.httpclient.protocol.HttpContext,cz.msebera.android.httpclient.client.methods.HttpUriRequest,java.lang.String,com.loopj.android.http.ResponseHandlerInterface,android.content.Context)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle delete(android.content.Context,java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle delete(android.content.Context,java.lang.String,cz.msebera.android.httpclient.Header[],com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle delete(java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.AsyncHttpResponseHandler)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle delete(java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle delete(android.content.Context,java.lang.String,cz.msebera.android.httpclient.Header[],com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle delete(android.content.Context,java.lang.String,cz.msebera.android.httpclient.HttpEntity,java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle get(android.content.Context,java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle get(android.content.Context,java.lang.String,cz.msebera.android.httpclient.Header[],com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle get(java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.AsyncHttpResponseHandler)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle get(java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle get(android.content.Context,java.lang.String,cz.msebera.android.httpclient.Header[],com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle get(android.content.Context,java.lang.String,cz.msebera.android.httpclient.HttpEntity,java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle post(android.content.Context,java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle post(android.content.Context,java.lang.String,cz.msebera.android.httpclient.Header[],com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle post(java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.AsyncHttpResponseHandler)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle post(java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle post(android.content.Context,java.lang.String,cz.msebera.android.httpclient.Header[],com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle post(android.content.Context,java.lang.String,cz.msebera.android.httpclient.HttpEntity,java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle put(android.content.Context,java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle put(android.content.Context,java.lang.String,cz.msebera.android.httpclient.Header[],com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle put(java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.AsyncHttpResponseHandler)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle put(java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle put(android.content.Context,java.lang.String,cz.msebera.android.httpclient.Header[],com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_
<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle put(android.content.Context,java.lang.String,cz.msebera.android.httpclient.HttpEntity,java.lang.String,com.loopj.android.http.ResponseHandlerInterface)> -> _SINK_



% retrofit

%TODO -> add retrofit sources and sinks -> according to https://www.appbrain.com/stats/libraries/tag/network/android-network-libraries second most used lib
% To add support -> add annotation sources and sinks
% Since the lib creates uses reflection to create implementation for the interfaces at runtime

% apache

<org.apache.http.client: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> -> _SINK_
<org.apache.http.client: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.client: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.client: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> -> _SINK_


%<T> T 	execute(HttpHost target,HttpRequest request,ResponseHandler<? extends T> responseHandler)
%<T> T 	execute(HttpHost target,HttpRequest request,ResponseHandler<? extends T> responseHandler,HttpContext context)
%<T> T 	execute(HttpUriRequest request,ResponseHandler<? extends T> responseHandler)
%<T> T 	execute(HttpUriRequest request,ResponseHandler<? extends T> responseHandler,HttpContext context)



% GRPC
% maybe add grpc as well



% Webview

<android.webkit.WebView: void loadUrl(java.lang.String)> -> _SINK_
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)> -> _SINK_
<android.webkit.WebView: void postUrl(java.lang.String,byte[])> -> _SINK_
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
